{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Automated changelog tool for preparing releases with lots of customization options. Changie aims to be a universal tool for any project language or style but limiting itself to changelogs and version management.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>File based changelog management keeps your commit history and release notes separate.</li> <li>Track changes while you work while the knowledge is fresh.</li> <li>Extensive configuration options to fit your project.</li> <li>Language and framework agnostic using a single go binary.</li> </ul>"},{"location":"#need-additional-help","title":"Need additional help?","text":"<p>Use the discussions page for help requests and how-to questions.</p> <p>Please open GitHub issues for bugs and feature requests. File an issue before creating a pull request, unless it is something simple like a typo.</p>"},{"location":"#want-to-contribute","title":"Want to Contribute?","text":"<p>If you want to contribute through code or documentation, the Contributing guide is the place to start. If you need additional help create an issue or post on discussions.</p>"},{"location":"cli/changie/","title":"changie","text":""},{"location":"cli/changie/#changie","title":"changie","text":"<p>changie handles conflict-free changelog management</p>"},{"location":"cli/changie/#synopsis","title":"Synopsis","text":"<p>Changie keeps your changes organized and attached to your code.</p> <p>Changie is aimed at seemlessly integrating into your release process while also being easy to use for developers and your release team.</p>"},{"location":"cli/changie/#options","title":"Options","text":"<pre><code>  -h, --help   help for changie\n</code></pre>"},{"location":"cli/changie/#see-also","title":"SEE ALSO","text":"<ul> <li>changie batch  - Batch unreleased changes into a single changelog</li> <li>changie completion    - Generate the autocompletion script for the specified shell</li> <li>changie diff    - diff outputs the release notes between versions.</li> <li>changie init    - Initialize a new changie skeleton</li> <li>changie latest    - Echos the latest release version number</li> <li>changie merge  - Merge all versions into one changelog</li> <li>changie new  - Create a new change file</li> <li>changie next    - Next echos the next version based on semantic versioning</li> </ul>"},{"location":"cli/changie_batch/","title":"changie batch","text":""},{"location":"cli/changie_batch/#changie-batch","title":"changie batch","text":"<p>Batch unreleased changes into a single changelog</p>"},{"location":"cli/changie_batch/#synopsis","title":"Synopsis","text":"<p>Merges all unreleased changes into one version changelog.</p> <p>Batch takes one argument for the next version to use, below are possible options.</p> <ul> <li>A specific semantic version value, with optional prefix</li> <li>Major, minor or patch to bump one level by one</li> <li>Auto which will automatically bump based on what changes were found</li> </ul> <p>The new version changelog can then be modified with extra descriptions, context or with custom tweaks before merging into the main file. Line breaks are added before each formatted line except the first, if you wish to add more line breaks include them in your format configurations.</p> <p>Changes are sorted in the following order:</p> <ul> <li>Components if enabled, in order specified by config.components</li> <li>Kinds if enabled, in order specified by config.kinds</li> <li>Timestamp oldest first</li> </ul> <pre><code>changie batch version|major|minor|patch|auto [flags]\n</code></pre>"},{"location":"cli/changie_batch/#options","title":"Options","text":"<pre><code>  -d, --dry-run              Print batched changes instead of writing to disk, does not delete fragments\n      --footer-path string   Path to version footer file in unreleased directory\n  -f, --force                Force a new version file even if one already exists\n      --header-path string   Path to version header file in unreleased directory\n  -h, --help                 help for batch\n  -i, --include strings      Include extra directories to search for change files, relative to change directory\n  -k, --keep                 Keep change fragments instead of deleting them\n  -m, --metadata strings     Metadata values to append to version\n      --move-dir string      Path to move unreleased changes\n  -p, --prerelease strings   Prerelease values to append to version\n  -j, --project string       Specify which project version we are batching\n      --remove-prereleases   Remove existing prerelease versions\n</code></pre>"},{"location":"cli/changie_batch/#see-also","title":"SEE ALSO","text":"<ul> <li>changie  - changie handles conflict-free changelog management</li> </ul>"},{"location":"cli/changie_completion/","title":"changie completion","text":""},{"location":"cli/changie_completion/#changie-completion","title":"changie completion","text":"<p>Generate the autocompletion script for the specified shell</p>"},{"location":"cli/changie_completion/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for changie for the specified shell. See each sub-command's help for details on how to use the generated script.</p>"},{"location":"cli/changie_completion/#options","title":"Options","text":"<pre><code>  -h, --help   help for completion\n</code></pre>"},{"location":"cli/changie_completion/#see-also","title":"SEE ALSO","text":"<ul> <li>changie  - changie handles conflict-free changelog management</li> <li>changie completion bash  - Generate the autocompletion script for bash</li> <li>changie completion fish  - Generate the autocompletion script for fish</li> <li>changie completion powershell  - Generate the autocompletion script for powershell</li> <li>changie completion zsh    - Generate the autocompletion script for zsh</li> </ul>"},{"location":"cli/changie_completion_bash/","title":"changie completion bash","text":""},{"location":"cli/changie_completion_bash/#changie-completion-bash","title":"changie completion bash","text":"<p>Generate the autocompletion script for bash</p>"},{"location":"cli/changie_completion_bash/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the bash shell.</p> <p>This script depends on the 'bash-completion' package. If it is not installed already, you can install it via your OS's package manager.</p> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(changie completion bash)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cli/changie_completion_bash/#linux","title":"Linux:","text":"<pre><code>changie completion bash &gt; /etc/bash_completion.d/changie\n</code></pre>"},{"location":"cli/changie_completion_bash/#macos","title":"macOS:","text":"<pre><code>changie completion bash &gt; $(brew --prefix)/etc/bash_completion.d/changie\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>changie completion bash\n</code></pre>"},{"location":"cli/changie_completion_bash/#options","title":"Options","text":"<pre><code>  -h, --help              help for bash\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cli/changie_completion_bash/#see-also","title":"SEE ALSO","text":"<ul> <li>changie completion    - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cli/changie_completion_fish/","title":"changie completion fish","text":""},{"location":"cli/changie_completion_fish/#changie-completion-fish","title":"changie completion fish","text":"<p>Generate the autocompletion script for fish</p>"},{"location":"cli/changie_completion_fish/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the fish shell.</p> <p>To load completions in your current shell session:</p> <pre><code>changie completion fish | source\n</code></pre> <p>To load completions for every new session, execute once:</p> <pre><code>changie completion fish &gt; ~/.config/fish/completions/changie.fish\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>changie completion fish [flags]\n</code></pre>"},{"location":"cli/changie_completion_fish/#options","title":"Options","text":"<pre><code>  -h, --help              help for fish\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cli/changie_completion_fish/#see-also","title":"SEE ALSO","text":"<ul> <li>changie completion    - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cli/changie_completion_powershell/","title":"changie completion powershell","text":""},{"location":"cli/changie_completion_powershell/#changie-completion-powershell","title":"changie completion powershell","text":"<p>Generate the autocompletion script for powershell</p>"},{"location":"cli/changie_completion_powershell/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for powershell.</p> <p>To load completions in your current shell session:</p> <pre><code>changie completion powershell | Out-String | Invoke-Expression\n</code></pre> <p>To load completions for every new session, add the output of the above command to your powershell profile.</p> <pre><code>changie completion powershell [flags]\n</code></pre>"},{"location":"cli/changie_completion_powershell/#options","title":"Options","text":"<pre><code>  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cli/changie_completion_powershell/#see-also","title":"SEE ALSO","text":"<ul> <li>changie completion    - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cli/changie_completion_zsh/","title":"changie completion zsh","text":""},{"location":"cli/changie_completion_zsh/#changie-completion-zsh","title":"changie completion zsh","text":"<p>Generate the autocompletion script for zsh</p>"},{"location":"cli/changie_completion_zsh/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the zsh shell.</p> <p>If shell completion is not already enabled in your environment you will need to enable it.  You can execute the following once:</p> <pre><code>echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n</code></pre> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(changie completion zsh)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cli/changie_completion_zsh/#linux","title":"Linux:","text":"<pre><code>changie completion zsh &gt; \"${fpath[1]}/_changie\"\n</code></pre>"},{"location":"cli/changie_completion_zsh/#macos","title":"macOS:","text":"<pre><code>changie completion zsh &gt; $(brew --prefix)/share/zsh/site-functions/_changie\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>changie completion zsh [flags]\n</code></pre>"},{"location":"cli/changie_completion_zsh/#options","title":"Options","text":"<pre><code>  -h, --help              help for zsh\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cli/changie_completion_zsh/#see-also","title":"SEE ALSO","text":"<ul> <li>changie completion    - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cli/changie_diff/","title":"changie diff","text":""},{"location":"cli/changie_diff/#changie-diff","title":"changie diff","text":"<p>diff outputs the release notes between versions.</p>"},{"location":"cli/changie_diff/#synopsis","title":"Synopsis","text":"<p>diff outputs to stdout the release notes between two versions.</p> <p>If the argument is a number, we simply output that many previous versions. If the argument is two versions split between triple dots similar to how GitHub supports as a comparison then we output the release notes between those two.</p> <p>Finally one last option is any of the constraints options from the semver package: https://github.com/Masterminds/semver#checking-version-constraints.</p> <p>Between versions we also add an amount of newlines specified by the AfterChangelogVersion value.</p> <pre><code>changie diff N|&gt;,&gt;=,&lt;,&lt;=version|versiona - versionb|start...end [flags]\n</code></pre>"},{"location":"cli/changie_diff/#examples","title":"Examples","text":"<pre><code>v1.20.0...v1.21.1\n</code></pre>"},{"location":"cli/changie_diff/#options","title":"Options","text":"<pre><code>  -h, --help               help for diff\n  -j, --project string     Specify which project we are interested in\n      --skip-prereleases   Excludes prereleases to determine the diff\n</code></pre>"},{"location":"cli/changie_diff/#see-also","title":"SEE ALSO","text":"<ul> <li>changie  - changie handles conflict-free changelog management</li> </ul>"},{"location":"cli/changie_init/","title":"changie init","text":""},{"location":"cli/changie_init/#changie-init","title":"changie init","text":"<p>Initialize a new changie skeleton</p>"},{"location":"cli/changie_init/#synopsis","title":"Synopsis","text":"<p>Initialize a few changie specifics.</p> <ul> <li>Folder to place all change files</li> <li>Subfolder to place all unreleased changes</li> <li>Header file to place on top of the changelog</li> <li>Output file when generating a changelog</li> <li>Unreleased folder includes a .gitkeep file</li> </ul> <p>Values will also be saved in a changie config at .changie.yaml. Default values follow keep a changelog and semver specs but are customizable.</p> <pre><code>changie init [flags]\n</code></pre>"},{"location":"cli/changie_init/#options","title":"Options","text":"<pre><code>  -d, --dir string      directory for all changes (default \".changes\")\n  -f, --force           force initialize even if config already exist\n  -h, --help            help for init\n  -o, --output string   file path to output our changelog (default \"CHANGELOG.md\")\n</code></pre>"},{"location":"cli/changie_init/#see-also","title":"SEE ALSO","text":"<ul> <li>changie  - changie handles conflict-free changelog management</li> </ul>"},{"location":"cli/changie_latest/","title":"changie latest","text":""},{"location":"cli/changie_latest/#changie-latest","title":"changie latest","text":"<p>Echos the latest release version number</p>"},{"location":"cli/changie_latest/#synopsis","title":"Synopsis","text":"<p>Echo the latest release version number to be used by CI tools.</p> <pre><code>changie latest [flags]\n</code></pre>"},{"location":"cli/changie_latest/#options","title":"Options","text":"<pre><code>  -h, --help               help for latest\n  -j, --project string     Specify which project we are interested in\n  -r, --remove-prefix      Remove 'v' prefix before echoing\n      --skip-prereleases   Excludes prereleases to determine the latest version.\n</code></pre>"},{"location":"cli/changie_latest/#see-also","title":"SEE ALSO","text":"<ul> <li>changie  - changie handles conflict-free changelog management</li> </ul>"},{"location":"cli/changie_merge/","title":"changie merge","text":""},{"location":"cli/changie_merge/#changie-merge","title":"changie merge","text":"<p>Merge all versions into one changelog</p>"},{"location":"cli/changie_merge/#synopsis","title":"Synopsis","text":"<p>Merge all version files into one changelog file and run any replacement commands.</p> <p>Note that a newline is added between each version file.</p> <pre><code>changie merge [flags]\n</code></pre>"},{"location":"cli/changie_merge/#options","title":"Options","text":"<pre><code>  -d, --dry-run                     Print merged changelog instead of writing to disk, will not run replacements\n  -h, --help                        help for merge\n  -u, --include-unreleased string   Include unreleased changes with this value as the header\n</code></pre>"},{"location":"cli/changie_merge/#see-also","title":"SEE ALSO","text":"<ul> <li>changie  - changie handles conflict-free changelog management</li> </ul>"},{"location":"cli/changie_new/","title":"changie new","text":""},{"location":"cli/changie_new/#changie-new","title":"changie new","text":"<p>Create a new change file</p>"},{"location":"cli/changie_new/#synopsis","title":"Synopsis","text":"<p>Creates a new change file. Change files are processed when batching a new release. Each version is merged together for the overall project changelog.</p> <p>Prompts are disabled and this command will fail if any values are not defined or valid and if any of the following are true:</p> <ol> <li>CI env var is true</li> <li>--interactive=false</li> </ol> <pre><code>changie new [flags]\n</code></pre>"},{"location":"cli/changie_new/#options","title":"Options","text":"<pre><code>  -b, --body string        Set the change body without a prompt\n  -c, --component string   Set the change component without a prompt\n  -m, --custom strings     Set custom values without a prompt\n  -d, --dry-run            Print new fragment instead of writing to disk\n  -e, --editor             Edit body message using your text editor defined by 'EDITOR' env variable\n  -h, --help               help for new\n  -i, --interactive        Set missing values with prompts (default true)\n  -k, --kind string        Set the change kind without a prompt\n  -j, --projects strings   Set the change projects without a prompt\n</code></pre>"},{"location":"cli/changie_new/#see-also","title":"SEE ALSO","text":"<ul> <li>changie  - changie handles conflict-free changelog management</li> </ul>"},{"location":"cli/changie_next/","title":"changie next","text":""},{"location":"cli/changie_next/#changie-next","title":"changie next","text":"<p>Next echos the next version based on semantic versioning</p>"},{"location":"cli/changie_next/#synopsis","title":"Synopsis","text":"<p>Next increments version based on semantic versioning. Check latest version and increment part (major, minor, patch). If auto is used, it will try and find the next version based on what kinds of changes are currently unreleased. Echo the next release version number to be used by CI tools or other commands like batch.</p> <pre><code>changie next major|minor|patch|auto [flags]\n</code></pre>"},{"location":"cli/changie_next/#options","title":"Options","text":"<pre><code>  -h, --help                 help for next\n  -i, --include strings      Include extra directories to search for change files, relative to change directory\n  -m, --metadata strings     Metadata values to append to version\n  -p, --prerelease strings   Prerelease values to append to version\n  -j, --project string       Specify which project we are interested in\n</code></pre>"},{"location":"cli/changie_next/#see-also","title":"SEE ALSO","text":"<ul> <li>changie  - changie handles conflict-free changelog management</li> </ul>"},{"location":"config/","title":"Configuration","text":""},{"location":"config/#config-body","title":"body","text":"<p>type: BodyConfig | optional</p> <p>Options to customize the body prompt</p>"},{"location":"config/#config-changeformat","title":"changeFormat","text":"<p>type: <code>string</code> | optional | template type: Change</p> <p>Template used to generate change lines in version files and changelog. Custom values are created through custom choices and can be accessible through the Custom argument.</p> Example <pre><code>changeFormat: '* [#{{.Custom.Issue}}](https://github.com/miniscruff/changie/issues/{{.Custom.Issue}}) {{.Body}}'\n</code></pre>"},{"location":"config/#config-changelogpath","title":"changelogPath","text":"<p>type: <code>string</code> | optional</p> <p>Filepath for the generated changelog file. Relative to project root. ChangelogPath is not required if you are using projects.</p> Example <pre><code>changelogPath: CHANGELOG.md\n</code></pre>"},{"location":"config/#config-changesdir","title":"changesDir","text":"<p>type: <code>string</code> | required</p> <p>Directory for change files, header file and unreleased files. Relative to project root.</p> Example <pre><code>changesDir: .changes\n</code></pre>"},{"location":"config/#config-componentformat","title":"componentFormat","text":"<p>type: <code>string</code> | optional | template type: ComponentData</p> <p>Template used to generate component headers. If format is empty no header will be included. If components are disabled, the format is unused.</p>"},{"location":"config/#config-components","title":"components","text":"<p>type: <code>[]string</code> | optional</p> <p>Components are an additional layer of organization suited for projects that want to split change fragments by an area or tag of the project. An example could be splitting your changelogs by packages for a monorepo. If no components are listed then the component prompt will be skipped and no component header included. By default no components are configured.</p> Example <pre><code>components:\n- API\n- CLI\n- Frontend\n</code></pre>"},{"location":"config/#config-custom","title":"custom","text":"<p>type: []Custom | optional</p> <p>Custom choices allow you to ask for additional information when creating a new change fragment. These custom choices are included in the change custom value.</p> Example <pre><code># github issue and author name\ncustom:\n- key: Issue\n  type: int\n  minInt: 1\n- key: Author\n  label: GitHub Name\n  type: string\n  minLength: 3\n</code></pre>"},{"location":"config/#config-envprefix","title":"envPrefix","text":"<p>type: <code>string</code> | optional</p> <p>Prefix of environment variables to load for templates. The prefix is removed from resulting key map.</p> Example <pre><code># if we have an environment variable like so:\n# export CHANGIE_PROJECT=changie\n# we can use that in our templates if we set the prefix\nenvPrefix: \"CHANGIE_\"\nversionFormat: \"New release for {{.Env.PROJECT}}\"\n</code></pre>"},{"location":"config/#config-footerformat","title":"footerFormat","text":"<p>type: <code>string</code> | optional | template type: BatchData</p> <p>Template used to generate a version footer.</p> Example <pre><code># config yaml\ncustom:\n- key: Author\n  type: string\n  minLength: 3\nfooterFormat: |\n  ### Contributors\n  {{- range (customs .Changes \"Author\" | uniq) }}\n  * [{{.}}](https://github.com/{{.}})\n  {{- end}}\n</code></pre>"},{"location":"config/#config-fragmentfileformat","title":"fragmentFileFormat","text":"<p>type: <code>string</code> | optional | template type: Change</p> <p>Customize the file name generated for new fragments. The default uses the component and kind only if configured for your project. The file is placed in the unreleased directory, so the full path is:</p> <p><code>{{.ChangesDir}}/{{.UnreleasedDir}}/{{.FragmentFileFormat}}.yaml</code></p> Example <pre><code>fragmentFileFormat: \"{{.Kind}}-{{.Custom.Issue}}\"\n</code></pre>"},{"location":"config/#config-headerformat","title":"headerFormat","text":"<p>type: <code>string</code> | optional | template type: BatchData</p> <p>Template used to generate a version header.</p>"},{"location":"config/#config-headerpath","title":"headerPath","text":"<p>type: <code>string</code> | optional</p> <p>Header content included at the top of the merged changelog. A default header file is created when initializing that follows \"Keep a Changelog\".</p> <p>Filepath for your changelog header file. Relative to changesDir.</p> Example <pre><code>headerPath: header.tpl.md\n</code></pre>"},{"location":"config/#config-kindformat","title":"kindFormat","text":"<p>type: <code>string</code> | optional | template type: KindData</p> <p>Template used to generate kind headers. If format is empty no header will be included. If kinds are disabled, the format is unused.</p>"},{"location":"config/#config-kinds","title":"kinds","text":"<p>type: []KindConfig | optional</p> <p>Kinds are another optional layer of changelogs suited for specifying what type of change we are making. If configured, developers will be prompted to select a kind.</p> <p>The default list comes from keep a changelog and includes; added, changed, removed, deprecated, fixed, and security.</p> Example <pre><code>kinds:\n- label: Added\n- label: Changed\n- label: Deprecated\n- label: Removed\n- label: Fixed\n- label: Security\n</code></pre>"},{"location":"config/#config-newlines","title":"newlines","text":"<p>type: NewlinesConfig | optional</p> <p>Newline options allow you to add extra lines between elements written by changie.</p>"},{"location":"config/#config-post","title":"post","text":"<p>type: []PostProcessConfig | optional</p> <p>Post process options when saving a new change fragment.</p> Example <pre><code># build a GitHub link from author choice\npost:\n- key: AuthorLink\n  value: \"https://github.com/{{.Custom.Author}}\nchangeFormat: \"* {{.Body}} by [{{.Custom.Author}}]({{.Custom.AuthorLink}})\"\n</code></pre>"},{"location":"config/#config-projects","title":"projects","text":"<p>type: []ProjectConfig | optional</p> <p>Projects allow you to specify child projects as part of a monorepo setup.</p> Example <pre><code>projects:\n  - label: UI\n    key: ui\n    changelog: ui/CHANGELOG.md\n  - label: Email Sender\n    key: email_sender\n    changelog: services/email/CHANGELOG.md\n</code></pre>"},{"location":"config/#config-projectsversionseparator","title":"projectsVersionSeparator","text":"<p>type: <code>string</code> | optional</p> <p>ProjectsVersionSeparator is used to determine the final version when using projects. The result is: project key + projectVersionSeparator + latest/next version.</p> Example <pre><code>projectsVersionSeparator: \"_\"\n</code></pre>"},{"location":"config/#config-replacements","title":"replacements","text":"<p>type: []Replacement | optional</p> <p>Replacements to run when merging a changelog.</p> Example <pre><code># nodejs package.json replacement\nreplacements:\n- path: package.json\n  find: '  \"version\": \".*\",'\n  replace: '  \"version\": \"{{.VersionNoPrefix}}\",'\n</code></pre>"},{"location":"config/#config-unreleaseddir","title":"unreleasedDir","text":"<p>type: <code>string</code> | required</p> <p>Directory for all unreleased change files. Relative to changesDir.</p> Example <pre><code>unreleasedDir: unreleased\n</code></pre>"},{"location":"config/#config-versionext","title":"versionExt","text":"<p>type: <code>string</code> | required</p> <p>File extension for generated version files. This should probably match your changelog path file. Must not include the period.</p> Example <pre><code># for markdown changelogs\nversionExt: md\n</code></pre>"},{"location":"config/#config-versionfooterpath","title":"versionFooterPath","text":"<p>type: <code>string</code> | optional</p> <p>Filepath for your version footer file relative to unreleasedDir. It is also possible to use the '--footer-path' parameter when using the batch command.</p>"},{"location":"config/#config-versionformat","title":"versionFormat","text":"<p>type: <code>string</code> | optional | template type: BatchData</p> <p>Template used to generate version headers.</p>"},{"location":"config/#config-versionheaderpath","title":"versionHeaderPath","text":"<p>type: <code>string</code> | optional</p> <p>Filepath for your version header file relative to unreleasedDir. It is also possible to use the '--header-path' parameter when using the batch command.</p>"},{"location":"config/#batchdata-type","title":"BatchData","text":"<p>Batch data is a common structure for templates when generating change fragments.</p>"},{"location":"config/#batchdata-changes","title":"Changes","text":"<p>type: []Change | optional</p> <p>Changes included in the batch</p>"},{"location":"config/#batchdata-env","title":"Env","text":"<p>type: map [ <code>string</code> ] <code>string</code> | optional</p> <p>Env vars configured by the system. See envPrefix for configuration.</p>"},{"location":"config/#batchdata-major","title":"Major","text":"<p>type: <code>int</code> | optional</p> <p>Major value of the version</p>"},{"location":"config/#batchdata-metadata","title":"Metadata","text":"<p>type: <code>string</code> | optional</p> <p>Metadata value of the version</p>"},{"location":"config/#batchdata-minor","title":"Minor","text":"<p>type: <code>int</code> | optional</p> <p>Minor value of the version</p>"},{"location":"config/#batchdata-patch","title":"Patch","text":"<p>type: <code>int</code> | optional</p> <p>Patch value of the version</p>"},{"location":"config/#batchdata-prerelease","title":"Prerelease","text":"<p>type: <code>string</code> | optional</p> <p>Prerelease value of the version</p>"},{"location":"config/#batchdata-previousversion","title":"PreviousVersion","text":"<p>type: <code>string</code> | optional</p> <p>Previous released version</p>"},{"location":"config/#batchdata-time","title":"Time","text":"<p>type: <code>Time</code> | optional</p> <p>Time of the change</p>"},{"location":"config/#batchdata-version","title":"Version","text":"<p>type: <code>string</code> | optional</p> <p>Version of the change, will include \"v\" prefix if used</p>"},{"location":"config/#batchdata-versionnoprefix","title":"VersionNoPrefix","text":"<p>type: <code>string</code> | optional</p> <p>Version of the release without the \"v\" prefix if used</p>"},{"location":"config/#bodyconfig-type","title":"BodyConfig","text":"<p>Body config allows you to customize the default body prompt</p>"},{"location":"config/#bodyconfig-maxlength","title":"maxLength","text":"<p>type: <code>int64</code> | optional</p> <p>Max length specifies the maximum body length</p>"},{"location":"config/#bodyconfig-minlength","title":"minLength","text":"<p>type: <code>int64</code> | optional</p> <p>Min length specifies the minimum body length</p>"},{"location":"config/#bodyconfig-block","title":"block","text":"<p>type: <code>bool</code> | optional</p> <p>Block allows multiline text inputs for body messages</p>"},{"location":"config/#change-type","title":"Change","text":"<p>Change represents an atomic change to a project.</p>"},{"location":"config/#change-body","title":"body","text":"<p>type: <code>string</code> | optional</p> <p>Body message of our change, if one was provided.</p>"},{"location":"config/#change-component","title":"component","text":"<p>type: <code>string</code> | optional</p> <p>Component of our change, if one was provided.</p>"},{"location":"config/#change-custom","title":"custom","text":"<p>type: map [ <code>string</code> ] <code>string</code> | optional</p> <p>Custom values corresponding to our options where each key-value pair is the key of the custom option and value the one provided in the change.</p> Example <pre><code>custom:\n- key: Issue\n  type: int\nchangeFormat: \"{{.Body}} from #{{.Custom.Issue}}\"\n</code></pre>"},{"location":"config/#change-env","title":"env","text":"<p>type: map [ <code>string</code> ] <code>string</code> | optional</p> <p>Env vars configured by the system. This is not written in change fragments but instead loaded by the system and accessible for templates. For example if you want to use an env var in change format you can, but env vars configured when executing <code>changie new</code> will not be saved. See envPrefix for configuration.</p>"},{"location":"config/#change-filename","title":"filename","text":"<p>type: <code>string</code> | optional</p> <p>Filename the change was saved to.</p>"},{"location":"config/#change-kind","title":"kind","text":"<p>type: <code>string</code> | optional</p> <p>Kind key of our change, if one was provided. Backwards compatible alias for KindKey.</p>"},{"location":"config/#change-kindkey","title":"kindKey","text":"<p>type: <code>string</code> | optional</p> <p>Kind key of our change, if one was provided.</p>"},{"location":"config/#change-kindlabel","title":"kindLabel","text":"<p>type: <code>string</code> | optional</p> <p>Kind label of our change, if one was provided.</p>"},{"location":"config/#change-project","title":"project","text":"<p>type: <code>string</code> | optional</p> <p>Project of our change, if one was provided.</p>"},{"location":"config/#change-time","title":"time","text":"<p>type: <code>Time</code> | required</p> <p>When our change was made.</p>"},{"location":"config/#componentdata-type","title":"ComponentData","text":"<p>Component data stores data related to writing component headers.</p>"},{"location":"config/#componentdata-component","title":"Component","text":"<p>type: <code>string</code> | required</p> <p>Name of the component</p>"},{"location":"config/#componentdata-env","title":"Env","text":"<p>type: map [ <code>string</code> ] <code>string</code> | optional</p> <p>Env vars configured by the system. See envPrefix for configuration.</p>"},{"location":"config/#custom-type","title":"Custom","text":"<p>Custom defines a custom choice that is asked when using 'changie new'. The result is an additional custom value in the change file for including in the change line.</p> <p>A simple one could be the issue number or authors github name.</p> Example <pre><code>- key: Author\n    label: GitHub Name\n    type: string\n    minLength: 3\n</code></pre>"},{"location":"config/#custom-enumoptions","title":"enumOptions","text":"<p>type: <code>[]string</code> | optional</p> <p>When using the enum type, you must also specify what possible options to allow. Users will be given a selection list to select the value they want.</p>"},{"location":"config/#custom-key","title":"key","text":"<p>type: <code>string</code> | required</p> <p>Value used as the key in the custom map for the change format. This should only contain alpha numeric characters, usually starting with a capital.</p> Example <pre><code>key: Issue\n</code></pre>"},{"location":"config/#custom-label","title":"label","text":"<p>type: <code>string</code> | optional</p> <p>Description used in the prompt when asking for the choice. If empty key is used instead.</p> Example <pre><code>label: GitHub Username\n</code></pre>"},{"location":"config/#custom-maxint","title":"maxInt","text":"<p>type: <code>int64</code> | optional</p> <p>If specified the input value must be less than or equal to maxInt.</p>"},{"location":"config/#custom-maxlength","title":"maxLength","text":"<p>type: <code>int64</code> | optional</p> <p>If specified string input must be no more than this long</p>"},{"location":"config/#custom-minint","title":"minInt","text":"<p>type: <code>int64</code> | optional</p> <p>If specified the input value must be greater than or equal to minInt.</p>"},{"location":"config/#custom-minlength","title":"minLength","text":"<p>type: <code>int64</code> | optional</p> <p>If specified the string input must be at least this long</p>"},{"location":"config/#custom-optional","title":"optional","text":"<p>type: <code>bool</code> | optional</p> <p>If true, an empty value will not fail validation. The optional check is handled before min so you can specify that the value is optional but if it is used it must have a minimum length or value depending on type.</p> <p>When building templates that allow for optional values you can compare the custom choice to an empty string to check for a value or empty.</p> Example <pre><code>custom:\n- key: TicketNumber\n  type: int\n  optional: true\nchangeFormat: &gt;-\n{{- if not (eq .Custom.TicketNumber \"\")}}\nPROJ-{{.Custom.TicketNumber}}\n{{- end}}\n{{.Body}}\n</code></pre>"},{"location":"config/#custom-type","title":"type","text":"<p>type: CustomType | required</p> <p>Specifies the type of choice which changes the prompt.</p> value description options string Freeform text minLength and maxLength block Multiline text minLength and maxLength int Whole numbers minInt and maxInt enum Limited set of strings enumOptions is used to specify values"},{"location":"config/#customtype-type","title":"CustomType","text":"<p>CustomType determines the possible custom choice types. Current values are: <code>string</code>, <code>block</code>, <code>int</code> and <code>enum</code>.</p>"},{"location":"config/#kindconfig-type","title":"KindConfig","text":"<p>Kind config allows you to customize the options depending on what kind was selected.</p>"},{"location":"config/#kindconfig-additionalchoices","title":"additionalChoices","text":"<p>type: []Custom | optional</p> <p>Additional choices allows adding choices per kind</p>"},{"location":"config/#kindconfig-auto","title":"auto","text":"<p>type: <code>string</code> | optional</p> <p>Auto determines what value to bump when using <code>batch auto</code> or <code>next auto</code>. Possible values are major, minor, patch or none and the highest one is used if multiple changes are found. none will not bump the version. Only none changes is not a valid bump and will fail to batch.</p> Example <pre><code>auto: minor\n</code></pre>"},{"location":"config/#kindconfig-changeformat","title":"changeFormat","text":"<p>type: <code>string</code> | optional</p> <p>Change format will override the root change format when building changes specific to this kind.</p> Example <pre><code>changeFormat: 'Breaking: {{.Custom.Body}}\n</code></pre>"},{"location":"config/#kindconfig-format","title":"format","text":"<p>type: <code>string</code> | optional</p> <p>Format will override the root kind format when building the kind header.</p> Example <pre><code>format: '### {{.Kind}} **Breaking Changes**'\n</code></pre>"},{"location":"config/#kindconfig-key","title":"key","text":"<p>type: <code>string</code> | optional</p> <p>Key is the value used for lookups and file names for kinds. By default it will use label if no key is provided.</p> Example <pre><code>key: feature\n</code></pre>"},{"location":"config/#kindconfig-label","title":"label","text":"<p>type: <code>string</code> | required</p> <p>Label is the value used in the prompt when selecting a kind.</p> Example <pre><code>label: Feature\n</code></pre>"},{"location":"config/#kindconfig-post","title":"post","text":"<p>type: []PostProcessConfig | optional</p> <p>Post process options when saving a new change fragment specific to this kind.</p>"},{"location":"config/#kindconfig-skipbody","title":"skipBody","text":"<p>type: <code>bool</code> | optional</p> <p>Skip body allows skipping the parent body prompt.</p>"},{"location":"config/#kindconfig-skipglobalchoices","title":"skipGlobalChoices","text":"<p>type: <code>bool</code> | optional</p> <p>Skip global choices allows skipping the parent choices options.</p>"},{"location":"config/#kindconfig-skipglobalpost","title":"skipGlobalPost","text":"<p>type: <code>bool</code> | optional</p> <p>Skip global post allows skipping the parent post processing.</p>"},{"location":"config/#kinddata-type","title":"KindData","text":"<p>Kind data stores data related to writing kind headers.</p>"},{"location":"config/#kinddata-env","title":"Env","text":"<p>type: map [ <code>string</code> ] <code>string</code> | optional</p> <p>Env vars configured by the system. See envPrefix for configuration.</p>"},{"location":"config/#kinddata-kind","title":"Kind","text":"<p>type: <code>string</code> | required</p> <p>Name of the kind</p>"},{"location":"config/#newlinesconfig-type","title":"NewlinesConfig","text":"<p>Configuration options for newlines before and after different elements.</p>"},{"location":"config/#newlinesconfig-afterchange","title":"afterChange","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines after change fragment</p>"},{"location":"config/#newlinesconfig-afterchangelogheader","title":"afterChangelogHeader","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines after the header file in the merged changelog</p>"},{"location":"config/#newlinesconfig-afterchangelogversion","title":"afterChangelogVersion","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines after adding a version to the changelog</p>"},{"location":"config/#newlinesconfig-aftercomponent","title":"afterComponent","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines after component</p>"},{"location":"config/#newlinesconfig-afterfooterfile","title":"afterFooterFile","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines after footer file</p>"},{"location":"config/#newlinesconfig-afterfooter","title":"afterFooter","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines after footer template</p>"},{"location":"config/#newlinesconfig-afterheaderfile","title":"afterHeaderFile","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines after header file</p>"},{"location":"config/#newlinesconfig-afterheadertemplate","title":"afterHeaderTemplate","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines after header template</p>"},{"location":"config/#newlinesconfig-afterkind","title":"afterKind","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines after kind</p>"},{"location":"config/#newlinesconfig-afterversion","title":"afterVersion","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines after version</p>"},{"location":"config/#newlinesconfig-beforechange","title":"beforeChange","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines before change fragment</p>"},{"location":"config/#newlinesconfig-beforechangelogversion","title":"beforeChangelogVersion","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines before adding a version to the changelog</p>"},{"location":"config/#newlinesconfig-beforecomponent","title":"beforeComponent","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines before component</p>"},{"location":"config/#newlinesconfig-beforefooterfile","title":"beforeFooterFile","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines before footer file</p>"},{"location":"config/#newlinesconfig-beforefootertemplate","title":"beforeFooterTemplate","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines before footer template</p>"},{"location":"config/#newlinesconfig-beforeheaderfile","title":"beforeHeaderFile","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines before header file</p>"},{"location":"config/#newlinesconfig-beforeheadertemplate","title":"beforeHeaderTemplate","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines before header template</p>"},{"location":"config/#newlinesconfig-beforekind","title":"beforeKind","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines before kind</p>"},{"location":"config/#newlinesconfig-beforeversion","title":"beforeVersion","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines before version</p>"},{"location":"config/#newlinesconfig-endofversion","title":"endOfVersion","text":"<p>type: <code>int</code> | optional</p> <p>Add newlines at the end of the version file</p>"},{"location":"config/#postprocessconfig-type","title":"PostProcessConfig","text":"<p>PostProcessConfig allows adding additional custom values to a change fragment after all the other inputs are complete. This will add additional keys to the <code>custom</code> section of the fragment. If the key already exists as part of a custom choice the value will be overridden.</p>"},{"location":"config/#postprocessconfig-key","title":"key","text":"<p>type: <code>string</code> | optional</p> <p>Key to save the custom value with</p>"},{"location":"config/#postprocessconfig-value","title":"value","text":"<p>type: <code>string</code> | optional | template type: Change</p> <p>Value of the custom value as a go template</p>"},{"location":"config/#projectconfig-type","title":"ProjectConfig","text":"<p>ProjectConfig extends changie to support multiple changelog files for different projects inside one repository.</p> Example <pre><code>projects:\n  - label: UI\n    key: ui\n    changelog: ui/CHANGELOG.md\n  - label: Email Sender\n    key: email_sender\n    changelog: services/email/CHANGELOG.md\n</code></pre>"},{"location":"config/#projectconfig-changelog","title":"changelog","text":"<p>type: <code>string</code> | optional</p> <p>ChangelogPath is the path to the changelog for this project.</p> Example <pre><code>changelog: src/frontend/CHANGELOG.md\n</code></pre>"},{"location":"config/#projectconfig-key","title":"key","text":"<p>type: <code>string</code> | optional</p> <p>Key is the value used for unreleased and version output paths.</p> Example <pre><code>key: frontend\n</code></pre>"},{"location":"config/#projectconfig-label","title":"label","text":"<p>type: <code>string</code> | optional</p> <p>Label is the value used in the prompt when selecting a project.</p> Example <pre><code>label: Frontend\n</code></pre>"},{"location":"config/#projectconfig-replacements","title":"replacements","text":"<p>type: []Replacement | optional</p> <p>Replacements to run when merging a changelog for our project.</p> Example <pre><code># nodejs package.json replacement\nreplacements:\n- path: ui/package.json\n  find: '  \"version\": \".*\",'\n  replace: '  \"version\": \"{{.VersionNoPrefix}}\",'\n</code></pre>"},{"location":"config/#replacedata-type","title":"ReplaceData","text":"<p>Template data used for replacing version values.</p>"},{"location":"config/#replacedata-major","title":"Major","text":"<p>type: <code>int</code> | optional</p> <p>Major value of the version</p>"},{"location":"config/#replacedata-metadata","title":"Metadata","text":"<p>type: <code>string</code> | optional</p> <p>Metadata value of the version</p>"},{"location":"config/#replacedata-minor","title":"Minor","text":"<p>type: <code>int</code> | optional</p> <p>Minor value of the version</p>"},{"location":"config/#replacedata-patch","title":"Patch","text":"<p>type: <code>int</code> | optional</p> <p>Patch value of the version</p>"},{"location":"config/#replacedata-prerelease","title":"Prerelease","text":"<p>type: <code>string</code> | optional</p> <p>Prerelease value of the version</p>"},{"location":"config/#replacedata-version","title":"Version","text":"<p>type: <code>string</code> | optional</p> <p>Version of the release, will include \"v\" prefix if used</p>"},{"location":"config/#replacedata-versionnoprefix","title":"VersionNoPrefix","text":"<p>type: <code>string</code> | optional</p> <p>Version of the release without the \"v\" prefix if used</p>"},{"location":"config/#replacement-type","title":"Replacement","text":"<p>Replacement handles the finding and replacing values when merging the changelog. This can be used to keep version strings in-sync when preparing a release without having to manually update them. This works similar to the find and replace from IDE tools but also includes the file path of the file.</p> Example <pre><code># NodeJS package.json\nreplacements:\n  - path: package.json\n    find: '  \"version\": \".*\",'\n    replace: '  \"version\": \"{{.VersionNoPrefix}}\",'\n</code></pre>"},{"location":"config/#replacement-find","title":"find","text":"<p>type: <code>string</code> | required</p> <p>Regular expression to search for in the file. Capture groups are supported and can be used in the replace value.</p>"},{"location":"config/#replacement-flags","title":"flags","text":"<p>type: <code>string</code> | optional</p> <p>Optional regular expression mode flags. Defaults to the m flag for multiline such that ^ and $ will match the start and end of each line and not just the start and end of the string.</p> <p>For more details on regular expression flags in Go view the regexp/syntax.</p>"},{"location":"config/#replacement-path","title":"path","text":"<p>type: <code>string</code> | required</p> <p>Path of the file to find and replace in. Also supports Go filepath globs.</p> Example <pre><code># Will match any .json file in the current directory\nreplacements:\n  - path: *.json\n    find: '  \"version\": \".*\",'\n    replace: '  \"version\": \"{{.VersionNoPrefix}}\",'\n</code></pre>"},{"location":"config/#replacement-replace","title":"replace","text":"<p>type: <code>string</code> | required | template type: ReplaceData</p> <p>Template string to replace the line with.</p>"},{"location":"config/#templatecache-type","title":"TemplateCache","text":"<p>Template cache handles running all the templates for change fragments. Included options include the default go template and sprig functions for formatting. Additionally, custom template functions are listed below for working with changes.</p> Example <pre><code>format: |\n### Contributors\n{{- range (customs .Changes \"Author\" | uniq) }}\n* [{{.}}](https://github.com/{{.}})\n{{- end}}\n</code></pre>"},{"location":"config/#templatecache-bodies","title":"bodies","text":"<p>Bodies will return all the bodies from the provided changes.</p> Example <pre><code>format: \"{{ bodies .Changes }} bodies\"\n</code></pre>"},{"location":"config/#templatecache-components","title":"components","text":"<p>Components will return all the components from the provided changes.</p> Example <pre><code>format: \"{{components .Changes }} components\"\n</code></pre>"},{"location":"config/#templatecache-count","title":"count","text":"<p>Count will return the number of occurrences of a string in a slice.</p> Example <pre><code>format: \"{{ kinds .Changes | count \\\"added\\\" }} kinds\"\n</code></pre>"},{"location":"config/#templatecache-customs","title":"customs","text":"<p>Customs will return all the values from the custom map by a key. If a key is missing from a change, it will be an empty string.</p> Example <pre><code>format: \"{{ customs .Changes \\\"Author\\\" }} authors\"\n</code></pre>"},{"location":"config/#templatecache-kinds","title":"kinds","text":"<p>Kinds will return all the kindsi from the provided changes.</p> Example <pre><code>format: \"{{ kinds .Changes }} kinds\"\n</code></pre>"},{"location":"config/#templatecache-times","title":"times","text":"<p>Times will return all the times from the provided changes.</p> Example <pre><code>format: \"{{ times .Changes }} times\"\n</code></pre>"},{"location":"guide/","title":"Guide","text":"<p>Changie is a changelog management tool using files in your project instead of special tags in git commits.</p>"},{"location":"guide/CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented here.</p> <p>The format is based on Keep a Changelog, adheres to Semantic Versioning, and is generated by itself.</p>"},{"location":"guide/CHANGELOG/#v1220-on-2025-06-01","title":"v1.22.0 on 2025-06-01","text":""},{"location":"guide/CHANGELOG/#added","title":"\u2728 Added","text":"<ul> <li>#771 Interactive flag to new command to support terminals that can not take user inputs</li> <li>#780 Diff command to output release notes between versions</li> </ul>"},{"location":"guide/CHANGELOG/#fixed","title":"\ud83e\udeb2 Fixed","text":"<ul> <li>#760 Update Go to 1.24</li> </ul>"},{"location":"guide/CHANGELOG/#v1211-on-2025-02-08","title":"v1.21.1 on 2025-02-08","text":""},{"location":"guide/CHANGELOG/#fixed_1","title":"\ud83e\udeb2 Fixed","text":"<ul> <li>#743 Merging when configured to use projects but the changelog path does not yet exist</li> <li>#743 next version with projects without any releases returns v1.0.0 instead of an error</li> <li>#687 Missing yaml struct tags on a few configs for json schema</li> <li>#745 Do not output usage when errors occur</li> </ul>"},{"location":"guide/CHANGELOG/#v1210-on-2024-09-12","title":"v1.21.0 on 2024-09-12","text":""},{"location":"guide/CHANGELOG/#added_1","title":"\u2728 Added","text":"<ul> <li>#713 Support filepath globs in replacements</li> </ul>"},{"location":"guide/CHANGELOG/#fixed_2","title":"\ud83e\udeb2 Fixed","text":"<ul> <li>#714 Clean up release notes files if any error takes place during the batch process</li> </ul>"},{"location":"guide/CHANGELOG/#v1201-on-2024-09-08","title":"v1.20.1 on 2024-09-08","text":""},{"location":"guide/CHANGELOG/#fixed_3","title":"\ud83e\udeb2 Fixed","text":"<ul> <li>#688 Validate kinds match config in fragment when batching release notes</li> </ul>"},{"location":"guide/CHANGELOG/#v1200-on-2024-09-08","title":"v1.20.0 on 2024-09-08","text":""},{"location":"guide/CHANGELOG/#added_2","title":"\u2728 Added","text":"<ul> <li>#702 Rework replacement to support grouping</li> <li>#706 KindKey and KindLabel values to Change data to be used in formats</li> </ul>"},{"location":"guide/CHANGELOG/#v1191-on-2024-06-25","title":"v1.19.1 on 2024-06-25","text":""},{"location":"guide/CHANGELOG/#fixed_4","title":"\ud83e\udeb2 Fixed","text":"<ul> <li>#675 New command can now properly create a fragment via custom CLI arguments if using a kind with custom choices.</li> </ul>"},{"location":"guide/CHANGELOG/#v1190-on-2024-05-13","title":"v1.19.0 on 2024-05-13","text":""},{"location":"guide/CHANGELOG/#added_3","title":"\u2728 Added","text":"<ul> <li>#651 Search upwards for a changie config file</li> <li>#612 Key option to kind configs to separate visual labels from file names and fragment values</li> </ul>"},{"location":"guide/CHANGELOG/#v1180-on-2024-01-15","title":"v1.18.0 on 2024-01-15","text":""},{"location":"guide/CHANGELOG/#added_4","title":"Added","text":"<ul> <li>#591 Replacements can now be configured per project in a monorepo setup</li> </ul>"},{"location":"guide/CHANGELOG/#removed","title":"Removed","text":"<ul> <li>#597 Preview warning when using projects</li> </ul>"},{"location":"guide/CHANGELOG/#v1170-on-2023-12-15","title":"v1.17.0 on 2023-12-15","text":""},{"location":"guide/CHANGELOG/#added_5","title":"Added","text":"<ul> <li>#586 VersionNoFormat can be used in the VersionFormat configuration</li> <li>#584 New command will create the unreleased folder if it does not already exist</li> </ul>"},{"location":"guide/CHANGELOG/#v1161-on-2023-12-08","title":"v1.16.1 on 2023-12-08","text":""},{"location":"guide/CHANGELOG/#fixed_5","title":"Fixed","text":"<ul> <li>#582 Running changie through NPM did not redirect the input stream, rendering 'changie new' inoperable</li> </ul>"},{"location":"guide/CHANGELOG/#v1160-on-2023-11-12","title":"v1.16.0 on 2023-11-12","text":""},{"location":"guide/CHANGELOG/#changed","title":"Changed","text":"<ul> <li>#571 Project prompt is now a multichoose prompt to allow one change to affect multiple projects without repeating the prompts</li> <li>#571 Project command line argument for new is now a list of projects and uses --projects instead of --project</li> </ul>"},{"location":"guide/CHANGELOG/#v1151-on-2023-10-29","title":"v1.15.1 on 2023-10-29","text":""},{"location":"guide/CHANGELOG/#fixed_6","title":"Fixed","text":"<ul> <li>#569 Merge unreleased now only merges project-specific changes into each project.</li> </ul>"},{"location":"guide/CHANGELOG/#v1150-on-2023-10-27","title":"v1.15.0 on 2023-10-27","text":""},{"location":"guide/CHANGELOG/#added_6","title":"Added","text":"<ul> <li>#561 Changie is now available as an NPM package.</li> </ul>"},{"location":"guide/CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>#552 Merge will merge all projects versions if projects are enabled.</li> </ul>"},{"location":"guide/CHANGELOG/#fixed_7","title":"Fixed","text":"<ul> <li>#554 Provide a better error message if a change file is invalid.</li> <li>#559 Slashes in FragmentFileFormat resulting in unexpected file paths.</li> </ul>"},{"location":"guide/CHANGELOG/#v1140-on-2023-10-03","title":"v1.14.0 on 2023-10-03","text":""},{"location":"guide/CHANGELOG/#added_7","title":"Added","text":"<ul> <li>#530 Option to use \"none\" as auto level to skip changes when calculating bump version</li> </ul>"},{"location":"guide/CHANGELOG/#v1131-on-2023-09-16","title":"v1.13.1 on 2023-09-16","text":""},{"location":"guide/CHANGELOG/#fixed_8","title":"Fixed","text":"<ul> <li>#536 customs template function returns an empty string instead of an error for missing keys.</li> </ul>"},{"location":"guide/CHANGELOG/#v1130-on-2023-08-19","title":"v1.13.0 on 2023-08-19","text":""},{"location":"guide/CHANGELOG/#added_8","title":"Added","text":"<ul> <li>#505 Option to edit body messages with a text editor using <code>-e/--editor</code></li> <li>#503 Option to batch unreleased changes when merging changelogs</li> <li>#520 Allow usage of prefixed environment variables in post</li> <li>#512 Projects configuration options and command arguments for monorepo support. Currently in preview mode.</li> </ul>"},{"location":"guide/CHANGELOG/#v1120-on-2023-03-16","title":"v1.12.0 on 2023-03-16","text":""},{"location":"guide/CHANGELOG/#added_9","title":"Added","text":"<ul> <li>#93 Support for multiline prompts and bodies</li> </ul>"},{"location":"guide/CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>#457 Switched prompt tool to cqroot/prompt, a bubbletea based prompt</li> </ul>"},{"location":"guide/CHANGELOG/#v1111-on-2023-02-05","title":"v1.11.1 on 2023-02-05","text":""},{"location":"guide/CHANGELOG/#fixed_9","title":"Fixed","text":"<ul> <li>#453 Default auto level for deprecation is now minor to match semver</li> </ul>"},{"location":"guide/CHANGELOG/#v1110-on-2023-01-26","title":"v1.11.0 on 2023-01-26","text":""},{"location":"guide/CHANGELOG/#added_10","title":"Added","text":"<ul> <li>#439 Auto mode to batch and new which uses kind configs to automatically determine the next bump level</li> </ul>"},{"location":"guide/CHANGELOG/#v1102-on-2022-12-19","title":"v1.10.2 on 2022-12-19","text":""},{"location":"guide/CHANGELOG/#fixed_10","title":"Fixed","text":"<ul> <li>#430 Remove extra newline character from the output of <code>changie latest</code></li> </ul>"},{"location":"guide/CHANGELOG/#v1101-on-2022-12-11","title":"v1.10.1 on 2022-12-11","text":""},{"location":"guide/CHANGELOG/#fixed_11","title":"Fixed","text":"<ul> <li>#404 Init command will exit if a changie config file already exists, a new force option exists if you want to reset your config</li> <li>#406 Batch command will exit if the version file already exists, a new force option was added if you want to override it</li> </ul>"},{"location":"guide/CHANGELOG/#v1100-on-2022-10-22","title":"v1.10.0 on 2022-10-22","text":""},{"location":"guide/CHANGELOG/#added_11","title":"Added","text":"<ul> <li>#372 Environment variable loading based on prefix</li> </ul>"},{"location":"guide/CHANGELOG/#v191-on-2022-09-20","title":"v1.9.1 on 2022-09-20","text":""},{"location":"guide/CHANGELOG/#fixed_12","title":"Fixed","text":"<ul> <li>#368 Unable to create a change fragment using <code>--custom</code> if your custom prompt had a Label</li> </ul>"},{"location":"guide/CHANGELOG/#v190-on-2022-08-28","title":"v1.9.0 on 2022-08-28","text":""},{"location":"guide/CHANGELOG/#added_12","title":"Added","text":"<ul> <li>#339 Kind option to new command</li> <li>#338 Body option to new command</li> <li>#348 Component option to new command</li> <li>#340 Custom option to new command</li> <li>#355 Options for post processing at global and per kind levels</li> </ul>"},{"location":"guide/CHANGELOG/#v180-on-2022-06-21","title":"v1.8.0 on 2022-06-21","text":""},{"location":"guide/CHANGELOG/#added_13","title":"Added","text":"<ul> <li>#238 Options to add additional newlines before and after elements in batch files</li> <li>#323 Options to add additional newlines before and after elements when merging a changelog file</li> </ul>"},{"location":"guide/CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>#324 Header path is now optional when merging the changelog</li> </ul>"},{"location":"guide/CHANGELOG/#v170-on-2022-05-16","title":"v1.7.0 on 2022-05-16","text":""},{"location":"guide/CHANGELOG/#added_14","title":"Added","text":"<ul> <li>#311 Option to customize filename for change fragments</li> <li>#312 Option to specify custom choices are optional</li> <li>#297 Major, minor, patch, prerelease and metadata values for templates that include the latest version</li> </ul>"},{"location":"guide/CHANGELOG/#v161-on-2022-03-19","title":"v1.6.1 on 2022-03-19","text":""},{"location":"guide/CHANGELOG/#fixed_13","title":"Fixed","text":"<ul> <li>#292 Version should not include minor or patch values if not included as argument to batch</li> </ul>"},{"location":"guide/CHANGELOG/#v160-on-2022-03-17","title":"v1.6.0 on 2022-03-17","text":""},{"location":"guide/CHANGELOG/#added_15","title":"Added","text":"<ul> <li>#283 skip-prereleases option to latest command</li> </ul>"},{"location":"guide/CHANGELOG/#fixed_14","title":"Fixed","text":"<ul> <li>#284 next command enforces argument to be major, minor or patch</li> </ul>"},{"location":"guide/CHANGELOG/#v151-on-2022-02-23","title":"v1.5.1 on 2022-02-23","text":""},{"location":"guide/CHANGELOG/#fixed_15","title":"Fixed","text":"<ul> <li>#263 Includes option properly deletes files included</li> <li>#264 Includes option deletes the directory if no files remain</li> </ul>"},{"location":"guide/CHANGELOG/#v150-on-2022-02-22","title":"v1.5.0 on 2022-02-22","text":""},{"location":"guide/CHANGELOG/#added_16","title":"Added","text":"<ul> <li>#247 Prerelease and metadata options for next and batch</li> <li>#248 Option to move unreleased files after batching</li> <li>#249 Option to include additional directories of change files when batching versions</li> <li>#250 Option to remove prerelease versions when batching</li> </ul>"},{"location":"guide/CHANGELOG/#v140-on-2022-02-17","title":"v1.4.0 on 2022-02-17","text":""},{"location":"guide/CHANGELOG/#added_17","title":"Added","text":"<ul> <li>#225 Previous version field to version header template data</li> <li>#222 Footers can be inserted at the end of version files using version footer flag or version footer config</li> <li>#229 Allow for use of sprig functions in templates</li> <li>#230 Header and footer templates config options for batch command</li> <li>#240 Header and footer files can use go templates and sprig functions</li> <li>#240 Template functions for working with changes for header and footer files or templates</li> </ul>"},{"location":"guide/CHANGELOG/#changed_4","title":"Changed","text":"<ul> <li>#235 Create files without exec bit (+x)</li> <li>#243 Changes are sorted oldest first instead of newest first</li> </ul>"},{"location":"guide/CHANGELOG/#deprecated","title":"Deprecated","text":"<ul> <li>#228 Batch commands <code>--headerPath</code> argument, use <code>--header-path</code> instead</li> </ul>"},{"location":"guide/CHANGELOG/#v130-on-2022-01-28","title":"v1.3.0 on 2022-01-28","text":""},{"location":"guide/CHANGELOG/#added_18","title":"Added","text":"<ul> <li>#203 dry-run option to merge command</li> <li>#202 dry-run option to new command</li> <li>#201 dry-run option to batch command</li> <li>#196 Keep option to batch command to not delete fragments</li> </ul>"},{"location":"guide/CHANGELOG/#changed_5","title":"Changed","text":"<ul> <li>#204 Default directory name to .changes for <code>init</code> command</li> </ul>"},{"location":"guide/CHANGELOG/#v120-on-2021-11-10","title":"v1.2.0 on 2021-11-10","text":""},{"location":"guide/CHANGELOG/#added_19","title":"Added","text":"<ul> <li>#180 Regular expression flag option for replacements</li> </ul>"},{"location":"guide/CHANGELOG/#v110-on-2021-10-24","title":"v1.1.0 on 2021-10-24","text":""},{"location":"guide/CHANGELOG/#added_20","title":"Added","text":"<ul> <li>#166 Option to use environment variable for config path</li> <li>#166 Try and load .changie.yml if .changie.yaml fails</li> </ul>"},{"location":"guide/CHANGELOG/#v100-on-2021-09-04","title":"v1.0.0 on 2021-09-04","text":"<p>With this release Changie aims to maintain compatibility for the CLI and options. Support for and use of Changie as an imported package is not recommended.</p>"},{"location":"guide/CHANGELOG/#v070-on-2021-07-12","title":"v0.7.0 on 2021-07-12","text":""},{"location":"guide/CHANGELOG/#added_21","title":"Added","text":"<ul> <li>#123 Option to customize body prompt similar to string choice</li> <li>#123 Min and max length checks for string choices</li> <li>#136 Option for additional choices per kind</li> <li>#136 Option to skip global choices per kind</li> <li>#136 Option to skip body prompts per kind</li> <li>#137 Change format option per kind</li> </ul>"},{"location":"guide/CHANGELOG/#changed_6","title":"Changed","text":"<ul> <li>#141 Default kind format does not have a newline to start</li> </ul>"},{"location":"guide/CHANGELOG/#v060-on-2021-07-04","title":"v0.6.0 on 2021-07-04","text":""},{"location":"guide/CHANGELOG/#added_22","title":"Added","text":"<ul> <li>#116 Optional component layer above kinds</li> </ul>"},{"location":"guide/CHANGELOG/#changed_7","title":"Changed","text":"<ul> <li>#118 Kinds can be extended with custom headers</li> <li>#116 Kind prompt can be toggled off</li> <li>#116 Kind headers are now optional</li> </ul>"},{"location":"guide/CHANGELOG/#v050-on-2021-05-10","title":"v0.5.0 on 2021-05-10","text":""},{"location":"guide/CHANGELOG/#added_23","title":"Added","text":"<ul> <li>#92 Option to include a header file when batching fragments into a version file.</li> <li>#98 Next command that echoes the latest version incremented by one.</li> <li>#100 Batch now supports bumping major, minor, and patch</li> </ul>"},{"location":"guide/CHANGELOG/#v041-on-2021-02-23","title":"v0.4.1 on 2021-02-23","text":""},{"location":"guide/CHANGELOG/#fixed_16","title":"Fixed","text":"<ul> <li>#48 Add maintainer to deb and rpm releases</li> <li>#48 Update homepage in releases to changie.dev</li> </ul>"},{"location":"guide/CHANGELOG/#v040-on-2021-01-01","title":"v0.4.0 on 2021-01-01","text":""},{"location":"guide/CHANGELOG/#added_24","title":"Added","text":"<ul> <li>#34 Option to find and replace in files during merge command</li> </ul>"},{"location":"guide/CHANGELOG/#fixed_17","title":"Fixed","text":"<ul> <li>#33 Latest command when no releases exist will return v0.0.0 instead of panicking</li> </ul>"},{"location":"guide/CHANGELOG/#v030-on-2020-12-28","title":"v0.3.0 on 2020-12-28","text":""},{"location":"guide/CHANGELOG/#added_25","title":"Added","text":"<ul> <li>#29 Reference to changie in default header template</li> </ul>"},{"location":"guide/CHANGELOG/#changed_8","title":"Changed","text":"<ul> <li>#28 Custom choices is now an array of Custom instead of a map</li> </ul>"},{"location":"guide/CHANGELOG/#fixed_18","title":"Fixed","text":"<ul> <li>#25 Incorrect file permissions on init when creating unreleased directory</li> </ul>"},{"location":"guide/CHANGELOG/#v020-on-2020-12-27","title":"v0.2.0 on 2020-12-27","text":""},{"location":"guide/CHANGELOG/#changed_9","title":"Changed","text":"<ul> <li>#22 Remove prefix argument in latest command is now a bool</li> </ul>"},{"location":"guide/CHANGELOG/#v010-on-2020-12-20","title":"v0.1.0 on 2020-12-20","text":"<p>Initial release</p>"},{"location":"guide/backup/","title":"Backup","text":"<p>If you are adding changie to the workflow for an existing project that includes a CHANGELOG you can follow these steps to keep your existing changes.</p> <ol> <li>Rename the existing <code>CHANGELOG.md</code></li> <li>Follow the quick start guide</li> <li>Move your backup changelog into the generated <code>changes</code> folder named as your latest release.<ul> <li>For example, if you just released v1.2.0 rename your changelog to <code>changes/v1.2.0.md</code></li> <li>If you are using another file extension and not markdown than adjust accordingly</li> </ul> </li> <li>Cut and paste the heading from your previous changelog into the generated <code>header.tpl.md</code> file</li> <li>Run <code>changie merge</code> to regenerate your changelog to make sure it looks right</li> </ol> <p>You can now use changie as normal, you do not need to recreate all previous version files.</p>"},{"location":"guide/installation/","title":"Installation","text":""},{"location":"guide/installation/#archlinux","title":"ArchLinux","text":"<p>An AUR package is available.</p> <pre><code>trizen -S changie\n</code></pre>"},{"location":"guide/installation/#docker","title":"Docker","text":"<p>Docker images are uploaded to GitHub Packages.</p> <pre><code># Replace latest with any changie command\ndocker run \\\n    --mount type=bind,source=$PWD,target=/src \\\n    -w /src \\\n    ghcr.io/miniscruff/changie \\\n    latest\n</code></pre> <p>Notes 1. In order to complete prompts with docker you will need to use an interactive terminal 1. You may also want to include your own user and group ID if any files would be created using the user option.</p> <pre><code>docker run \\\n    --mount type=bind,source=$PWD,target=/src \\\n    -w /src \\\n    -it \\\n    --user $(id -u ${USER}):$(id -g ${USER}) \\\n    ghcr.io/miniscruff/changie \\\n    new\n</code></pre>"},{"location":"guide/installation/#github-action","title":"GitHub action","text":"<p>This GitHub action can be used.</p> <pre><code>- name: Batch a new minor version\n  uses: miniscruff/changie-action@VERSION # view action repo for latest version\n  with:\n    version: latest # use the latest changie version\n    args: batch minor\n</code></pre>"},{"location":"guide/installation/#macos-with-homebrew","title":"macOS with Homebrew","text":"<p>On macOS, you can use Homebrew to install changie from homebrew core.</p> <pre><code>brew install changie\n</code></pre>"},{"location":"guide/installation/#manual","title":"Manual","text":"<ul> <li>Download from here.</li> <li>Add executable somewhere in your path depending on your platform.</li> </ul>"},{"location":"guide/installation/#manual-debrpm-packages","title":"Manual deb/rpm packages","text":"<p>Download a <code>.deb</code> or <code>.rpm</code> file from the releases page and install with <code>dpkg -i</code> and <code>rpm -i</code> respectively.</p>"},{"location":"guide/installation/#mise","title":"Mise","text":"<p>Changie is included in the Mise registry. It's recommended to use <code>mise use</code> for tools.</p> <pre><code>mise use changie\n</code></pre> <p>This will add changie to the <code>mise.toml</code> file. <pre><code>[tools]\nchangie = \"latest\"\n</code></pre></p> <p>Or if you only want to use changie for a single mise task, such as <code>changie new</code>.</p> <pre><code>[tasks.fragment]\ntools.changie = \"latest\"\nrun = \"changie new\"\n</code></pre>"},{"location":"guide/installation/#nodejs","title":"NodeJS","text":"<p>Changie is available as an NPM package.</p> <p>To add as a dependency of your project</p> <pre><code>npm i -D changie\n</code></pre> <p>To install globally</p> <pre><code>npm i -g changie\n</code></pre> <p>To run without adding a dependency</p> <pre><code>npx changie\n</code></pre>"},{"location":"guide/installation/#source","title":"Source","text":"<p>Go install can be used to download changie from the main branch.</p> <pre><code>go install github.com/miniscruff/changie@latest\n</code></pre>"},{"location":"guide/installation/#ubi-universal-binary-installer","title":"UBI ( universal binary installer )","text":"<p>UBI can be used to install Changie binaries directly from GitHub.</p> <pre><code>ubi --project miniscruff/changie --in /binary/path\n</code></pre>"},{"location":"guide/installation/#windows-scoop","title":"Windows Scoop","text":"<p>On Windows you can use scoop by first adding the repo and then installing. <pre><code>scoop bucket add changie https://github.com/miniscruff/changie\nscoop install changie\n</code></pre></p>"},{"location":"guide/installation/#winget","title":"Winget","text":"<p>On Windows you can also use the winget package manager.</p> <pre><code>winget install miniscruff.changie\n</code></pre>"},{"location":"guide/quick_start/","title":"Quick Start","text":"<p>Before starting, if you already have a <code>CHANGELOG.md</code> read the backup guide first.</p> <p>Run <code>init</code> to bootstrap your project with a sample config, header and empty changelog.</p> <pre><code>changie init\n</code></pre> <p>You can configure changie by editing the generated <code>.changie.yaml</code> file.</p> <p>When completing work on a feature, bugfix or user impacting change use the new command to generate your change file.</p> <pre><code>changie new\n</code></pre> <p>When it is time to prepare your next release, batch all unreleased changes into one using the batch command.</p> <pre><code># changie supports semver bump values\nchangie batch &lt;major|minor|patch&gt;\n# using an explicit version\nchangie batch &lt;version&gt;\n# or using auto if you have kinds configured for auto bumps\nchangie batch auto\n</code></pre> <p>After you have batched a new version you can merge it into the parent changelog using the merge command.</p> <pre><code>changie merge\n</code></pre>"},{"location":"guide/upgrade/","title":"Upgrade Guide","text":""},{"location":"guide/upgrade/#from-v050","title":"From v0.5.0","text":"<p>Kind configuration moved from a string array to an array of objects. These objects allow you to customize each kind but does cause a backwards incompatibility issue.</p> <p>In order to resolve this issue you will need to specify kinds as an object. The old string value is now the label.</p> <pre><code># Old\nkinds:\n  - Added\n  - Changed\n  - Deprecated\n\n# New\nkinds:\n  - label: Added\n  - label: Changed\n  - label: Deprecated\n</code></pre>"},{"location":"integrations/","title":"Index","text":"<p>How to integrate changie with other projects or systems</p>"},{"location":"integrations/ci/","title":"Continuous Integration","text":"<p>When creating changie fragments as part of your team workflow, you may have suggestions or comments about the kind, body or custom fields that are changed outside of the changie tool. As changie fragments are plain yaml files there is nothing wrong with editing these after creating the fragment. However, it is possible to create invalid fragments when doing so, one such example is if you typo a kind or invalid custom prompt answer.</p> <p>One way to prevent this issue from causing later problems is to run changie as part of your CI tests.</p> <p>This currently does not validate custom prompts meet validation rules such as min length. This is likely to be extended in the future.</p> <p>Below is an example if you are using the github action.</p> <pre><code>- name: Validate changie fragment is valid\n  uses: miniscruff/changie-action@VERSION # view action repo for latest version\n  with:\n    version: latest # use the latest changie version\n    # dry run may not be required as you likely aren't\n    # committing the changes anyway, but it will print\n    # to stdout this way\n    args: batch major --dry-run \n</code></pre>"},{"location":"integrations/goreleaser/","title":"Goreleaser","text":"<p>Changie itself uses GoReleaser and can be integrated with a few steps.</p> <p>First make sure GoReleaser will even generate any changelog by setting skip to false.</p> <pre><code>changelog:\n  disable: false\n</code></pre> <p>By default GoReleaser expects to release the current tag but we can let GitHub create one for us during the release. To do this set the goreleaser current tag environment variable using changie latest.</p> <pre><code>export GORELEASER_CURRENT_TAG=\"$(changie latest)\"\n</code></pre> <p>Finally we can run GoReleaser, you will need to add two parameters, release notes and skip validate. We need to use skip validate because we skip the git tag. If you choose to tag the commit instead you do not need to use this.</p> <pre><code>goreleaser --release-notes=\"changes/$(changie latest)\" --skip-validate\n</code></pre> <p>If you would like to use the goreleaser github action you can reference release.yaml.</p>"},{"location":"integrations/nodejs/","title":"NodeJS","text":"<p>During the release process it is likely you want to update your package json to use the new version. This can be handled automatically by Changie using the replacements configuration, which occur when you run <code>changie merge</code>.</p> <p>Below is how you could configure it for NodeJS.</p> <pre><code>replacements:\n  - path: package.json\n    find: '  \"version\": \".*\",'\n    replace: '  \"version\": \"{{.VersionNoPrefix}}\",'\n</code></pre> <p>Note: If you do not use any <code>v</code> prefixes on your versions ( <code>1.3.4</code> instead of <code>v1.3.4</code> ) you can just use <code>{{.Version}}</code>.</p>"},{"location":"integrations/release_trigger/","title":"Release Trigger","text":"<p>Changie expects to be the first part of the release process as it modifies files that are kept in the repository.</p> <p>A method used by Changie itself is to detect changes to the root CHANGELOG file as a trigger to begin the release process. Below is how you can do that in a GitHub action.</p> <pre><code>on:\n  push:\n    branches: [ main ] # your default branch if different\n    paths: [ CHANGELOG.md ] # your changelog file if different\n\njobs:\n  release:\n   # do your releasing here\n</code></pre> <p>Then you can use Changie to update your changelog and let your action do the rest.</p>"},{"location":"integrations/yq/","title":"yq","text":"<p>If you are familiar with jq you may be interested to know that there is a similar tool specifically built for yaml files named yq.</p> <p>This tool comes in handy if you are every looking to combine a yaml configuration file with any sort of script or tooling. For instance, if you ever want to pull your changie kind keys out into a list and process.</p> <p>Below is a small sample of commands you can run.</p>"},{"location":"integrations/yq/#kind-keys","title":"Kind keys","text":"<pre><code>yq '.kinds[].key' .changie.yaml\n</code></pre> <p>Output <pre><code>added\nchanged\ndeprecated\nremoved\nfixed\nsecurity\n</code></pre></p>"},{"location":"integrations/yq/#kind-labels","title":"Kind labels","text":"<pre><code>yq '.kinds[].label' .changie.yaml\n</code></pre> <p>Output <pre><code>\u2728 Added\n\ud83d\udd25 Changed\n\u26b0\ufe0f Deprecated\n\ud83d\uddd1\ufe0f Removed\n\ud83e\udeb2 Fixed\n\ud83e\uddba Security\n</code></pre></p>"},{"location":"integrations/yq/#custom-keys","title":"Custom keys","text":"<pre><code>yq '.custom[].key' .changie.yaml\n</code></pre> <p>Output <pre><code>Issue\n</code></pre></p>"}]}